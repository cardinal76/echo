package it.clevercom.echo.tm.model.entity;
// Generated 10-gen-2017 15.17.23 by Hibernate Tools 5.2.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Physician generated by hbm2java
 */
@Entity
@Table(name = "physician", catalog = "tmdw")
public class Physician implements java.io.Serializable {

	private Integer idPhysician;
	private Login login;
	private String name;
	private String surname;
	private Character gender;
	private String telephone;
	private String skype;
	private String email;
	private Date dateOfBirth;
	private Date created;
	private Date updated;
	private boolean active;
	private String updateUser;
	private Set<Specialtytype> specialtytypes = new HashSet<Specialtytype>(0);
	private Set<PhysicianOrganizationunit> physicianOrganizationunits = new HashSet<PhysicianOrganizationunit>(0);
	private Set<Message> messages = new HashSet<Message>(0);
	private Set<Meetingrequest> meetingrequests = new HashSet<Meetingrequest>(0);
	private Set<PhysicianPatient> physicianPatients = new HashSet<PhysicianPatient>(0);

	public Physician() {
	}

	public Physician(Login login, Date created, Date updated, boolean active, String updateUser) {
		this.login = login;
		this.created = created;
		this.updated = updated;
		this.active = active;
		this.updateUser = updateUser;
	}

	public Physician(Login login, String name, String surname, Character gender, String telephone, String skype,
			String email, Date dateOfBirth, Date created, Date updated, boolean active, String updateUser,
			Set<Specialtytype> specialtytypes, Set<PhysicianOrganizationunit> physicianOrganizationunits,
			Set<Message> messages, Set<Meetingrequest> meetingrequests, Set<PhysicianPatient> physicianPatients) {
		this.login = login;
		this.name = name;
		this.surname = surname;
		this.gender = gender;
		this.telephone = telephone;
		this.skype = skype;
		this.email = email;
		this.dateOfBirth = dateOfBirth;
		this.created = created;
		this.updated = updated;
		this.active = active;
		this.updateUser = updateUser;
		this.specialtytypes = specialtytypes;
		this.physicianOrganizationunits = physicianOrganizationunits;
		this.messages = messages;
		this.meetingrequests = meetingrequests;
		this.physicianPatients = physicianPatients;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "idPhysician", unique = true, nullable = false)
	public Integer getIdPhysician() {
		return this.idPhysician;
	}

	public void setIdPhysician(Integer idPhysician) {
		this.idPhysician = idPhysician;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idLogin", nullable = false)
	public Login getLogin() {
		return this.login;
	}

	public void setLogin(Login login) {
		this.login = login;
	}

	@Column(name = "name", length = 100)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "surname", length = 100)
	public String getSurname() {
		return this.surname;
	}

	public void setSurname(String surname) {
		this.surname = surname;
	}

	@Column(name = "gender", length = 1)
	public Character getGender() {
		return this.gender;
	}

	public void setGender(Character gender) {
		this.gender = gender;
	}

	@Column(name = "telephone", length = 100)
	public String getTelephone() {
		return this.telephone;
	}

	public void setTelephone(String telephone) {
		this.telephone = telephone;
	}

	@Column(name = "skype", length = 100)
	public String getSkype() {
		return this.skype;
	}

	public void setSkype(String skype) {
		this.skype = skype;
	}

	@Column(name = "email", length = 100)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "dateOfBirth", length = 10)
	public Date getDateOfBirth() {
		return this.dateOfBirth;
	}

	public void setDateOfBirth(Date dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", nullable = false, length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated", nullable = false, length = 19)
	public Date getUpdated() {
		return this.updated;
	}

	public void setUpdated(Date updated) {
		this.updated = updated;
	}

	@Column(name = "active", nullable = false)
	public boolean isActive() {
		return this.active;
	}

	public void setActive(boolean active) {
		this.active = active;
	}

	@Column(name = "updateUser", nullable = false, length = 100)
	public String getUpdateUser() {
		return this.updateUser;
	}

	public void setUpdateUser(String updateUser) {
		this.updateUser = updateUser;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "physician_specialtytype", catalog = "tmdw", joinColumns = {
			@JoinColumn(name = "idPhysician", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "idSpecialtyType", nullable = false, updatable = false) })
	public Set<Specialtytype> getSpecialtytypes() {
		return this.specialtytypes;
	}

	public void setSpecialtytypes(Set<Specialtytype> specialtytypes) {
		this.specialtytypes = specialtytypes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "physician")
	public Set<PhysicianOrganizationunit> getPhysicianOrganizationunits() {
		return this.physicianOrganizationunits;
	}

	public void setPhysicianOrganizationunits(Set<PhysicianOrganizationunit> physicianOrganizationunits) {
		this.physicianOrganizationunits = physicianOrganizationunits;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "physician")
	public Set<Message> getMessages() {
		return this.messages;
	}

	public void setMessages(Set<Message> messages) {
		this.messages = messages;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "physician")
	public Set<Meetingrequest> getMeetingrequests() {
		return this.meetingrequests;
	}

	public void setMeetingrequests(Set<Meetingrequest> meetingrequests) {
		this.meetingrequests = meetingrequests;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "physician")
	public Set<PhysicianPatient> getPhysicianPatients() {
		return this.physicianPatients;
	}

	public void setPhysicianPatients(Set<PhysicianPatient> physicianPatients) {
		this.physicianPatients = physicianPatients;
	}

}
