package it.clevercom.echo.tm.model.entity;
// Generated 17-gen-2017 15.09.29 by Hibernate Tools 5.2.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Specialtytype generated by hbm2java
 */
@Entity
@Table(name = "specialtytype", catalog = "tmdw")
public class Specialtytype implements java.io.Serializable {

	private Integer idSpecialtyType;
	private Specialtytype specialtytype;
	private String description;
	private String diagnosticOrTherapeutic;
	private String surgicalOrInternal;
	private String patientAgeRange;
	private String organOrTechnique;
	private Date created;
	private Date updated;
	private boolean active;
	private String updateUser;
	private Set<Specialtytype> specialtytypes = new HashSet<Specialtytype>(0);
	private Set<Physician> physicians = new HashSet<Physician>(0);

	public Specialtytype() {
	}

	public Specialtytype(Specialtytype specialtytype, Date created, Date updated, boolean active, String updateUser) {
		this.specialtytype = specialtytype;
		this.created = created;
		this.updated = updated;
		this.active = active;
		this.updateUser = updateUser;
	}

	public Specialtytype(Specialtytype specialtytype, String description, String diagnosticOrTherapeutic,
			String surgicalOrInternal, String patientAgeRange, String organOrTechnique, Date created, Date updated,
			boolean active, String updateUser, Set<Specialtytype> specialtytypes, Set<Physician> physicians) {
		this.specialtytype = specialtytype;
		this.description = description;
		this.diagnosticOrTherapeutic = diagnosticOrTherapeutic;
		this.surgicalOrInternal = surgicalOrInternal;
		this.patientAgeRange = patientAgeRange;
		this.organOrTechnique = organOrTechnique;
		this.created = created;
		this.updated = updated;
		this.active = active;
		this.updateUser = updateUser;
		this.specialtytypes = specialtytypes;
		this.physicians = physicians;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "idSpecialtyType", unique = true, nullable = false)
	public Integer getIdSpecialtyType() {
		return this.idSpecialtyType;
	}

	public void setIdSpecialtyType(Integer idSpecialtyType) {
		this.idSpecialtyType = idSpecialtyType;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "parentId", nullable = false)
	public Specialtytype getSpecialtytype() {
		return this.specialtytype;
	}

	public void setSpecialtytype(Specialtytype specialtytype) {
		this.specialtytype = specialtytype;
	}

	@Column(name = "description", length = 100)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "diagnosticOrTherapeutic", length = 11)
	public String getDiagnosticOrTherapeutic() {
		return this.diagnosticOrTherapeutic;
	}

	public void setDiagnosticOrTherapeutic(String diagnosticOrTherapeutic) {
		this.diagnosticOrTherapeutic = diagnosticOrTherapeutic;
	}

	@Column(name = "surgicalOrInternal", length = 9)
	public String getSurgicalOrInternal() {
		return this.surgicalOrInternal;
	}

	public void setSurgicalOrInternal(String surgicalOrInternal) {
		this.surgicalOrInternal = surgicalOrInternal;
	}

	@Column(name = "patientAgeRange", length = 9)
	public String getPatientAgeRange() {
		return this.patientAgeRange;
	}

	public void setPatientAgeRange(String patientAgeRange) {
		this.patientAgeRange = patientAgeRange;
	}

	@Column(name = "organOrTechnique", length = 17)
	public String getOrganOrTechnique() {
		return this.organOrTechnique;
	}

	public void setOrganOrTechnique(String organOrTechnique) {
		this.organOrTechnique = organOrTechnique;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", nullable = false, length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated", nullable = false, length = 19)
	public Date getUpdated() {
		return this.updated;
	}

	public void setUpdated(Date updated) {
		this.updated = updated;
	}

	@Column(name = "active", nullable = false)
	public boolean isActive() {
		return this.active;
	}

	public void setActive(boolean active) {
		this.active = active;
	}

	@Column(name = "updateUser", nullable = false, length = 100)
	public String getUpdateUser() {
		return this.updateUser;
	}

	public void setUpdateUser(String updateUser) {
		this.updateUser = updateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "specialtytype")
	public Set<Specialtytype> getSpecialtytypes() {
		return this.specialtytypes;
	}

	public void setSpecialtytypes(Set<Specialtytype> specialtytypes) {
		this.specialtytypes = specialtytypes;
	}

	@ManyToMany(fetch = FetchType.LAZY, mappedBy = "specialtytypes")
	public Set<Physician> getPhysicians() {
		return this.physicians;
	}

	public void setPhysicians(Set<Physician> physicians) {
		this.physicians = physicians;
	}

}
