package it.clevercom.echo.tm.model.entity.gateway;
// Generated 4-mag-2017 22.42.08 by Hibernate Tools 5.2.2.Final


import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;
import it.clevercom.echo.common.jpa.entity.AbstractJpaEchoEntity;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

/**
 * GatewayEventBloodPressure generated by hbm2java
 */
@Entity
@DynamicUpdate
@DynamicInsert
@Table(name="tm_gateway_event_blood_pressure"
)
public class GatewayEventBloodPressure  extends AbstractJpaEchoEntity implements java.io.Serializable {


     private Long idbloodpressure;
     private GatewayEvent gatewayEvent;
     private Long arterialpressure;
     private Long diastolicpressure;
     private Long measurestatus;
     private Long pulserate;
     private Long systolicpressure;
     private String uom;

    public GatewayEventBloodPressure() {
    }

    public GatewayEventBloodPressure(GatewayEvent gatewayEvent, Long arterialpressure, Long diastolicpressure, Long measurestatus, Long pulserate, Long systolicpressure, String uom) {
       this.gatewayEvent = gatewayEvent;
       this.arterialpressure = arterialpressure;
       this.diastolicpressure = diastolicpressure;
       this.measurestatus = measurestatus;
       this.pulserate = pulserate;
       this.systolicpressure = systolicpressure;
       this.uom = uom;
    }
   
     @GenericGenerator(name="generator", strategy="org.hibernate.id.enhanced.SequenceStyleGenerator", parameters={@Parameter(name="optimizer", value="none"), @Parameter(name="sequence_name", value="tm_gateway_event_idbloodpressure_seq"), @Parameter(name="increment_size", value="1")})@Id @GeneratedValue(generator="generator")

    
    @Column(name="idbloodpressure", unique=true, nullable=false)
    public Long getIdbloodpressure() {
        return this.idbloodpressure;
    }
    
    public void setIdbloodpressure(Long idbloodpressure) {
        this.idbloodpressure = idbloodpressure;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="idevent", nullable=false)
    public GatewayEvent getGatewayEvent() {
        return this.gatewayEvent;
    }
    
    public void setGatewayEvent(GatewayEvent gatewayEvent) {
        this.gatewayEvent = gatewayEvent;
    }

    
    @Column(name="arterialpressure", nullable=false)
    public Long getArterialpressure() {
        return this.arterialpressure;
    }
    
    public void setArterialpressure(Long arterialpressure) {
        this.arterialpressure = arterialpressure;
    }

    
    @Column(name="diastolicpressure", nullable=false)
    public Long getDiastolicpressure() {
        return this.diastolicpressure;
    }
    
    public void setDiastolicpressure(Long diastolicpressure) {
        this.diastolicpressure = diastolicpressure;
    }

    
    @Column(name="measurestatus", nullable=false)
    public Long getMeasurestatus() {
        return this.measurestatus;
    }
    
    public void setMeasurestatus(Long measurestatus) {
        this.measurestatus = measurestatus;
    }

    
    @Column(name="pulserate", nullable=false)
    public Long getPulserate() {
        return this.pulserate;
    }
    
    public void setPulserate(Long pulserate) {
        this.pulserate = pulserate;
    }

    
    @Column(name="systolicpressure", nullable=false)
    public Long getSystolicpressure() {
        return this.systolicpressure;
    }
    
    public void setSystolicpressure(Long systolicpressure) {
        this.systolicpressure = systolicpressure;
    }

    
    @Column(name="uom", nullable=false, length=10)
    public String getUom() {
        return this.uom;
    }
    
    public void setUom(String uom) {
        this.uom = uom;
    }




}


