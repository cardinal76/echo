package it.clevercom.echo.tm.model.entity;
// Generated 17-gen-2017 15.09.29 by Hibernate Tools 5.2.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Standardthreshold generated by hbm2java
 */
@Entity
@Table(name = "standardthreshold", catalog = "tmdw")
public class Standardthreshold implements java.io.Serializable {

	private Integer idStandardThreshold;
	private Measurementtype measurementtype;
	private Float valueFrom;
	private Float valueTo;
	private Boolean mustGenerateAlert;
	private String commaEnumValues;
	private Date created;
	private Date updated;
	private boolean active;
	private String updateUser;
	private Set<Customthreshold> customthresholds = new HashSet<Customthreshold>(0);

	public Standardthreshold() {
	}

	public Standardthreshold(Measurementtype measurementtype, Date created, Date updated, boolean active,
			String updateUser) {
		this.measurementtype = measurementtype;
		this.created = created;
		this.updated = updated;
		this.active = active;
		this.updateUser = updateUser;
	}

	public Standardthreshold(Measurementtype measurementtype, Float valueFrom, Float valueTo, Boolean mustGenerateAlert,
			String commaEnumValues, Date created, Date updated, boolean active, String updateUser,
			Set<Customthreshold> customthresholds) {
		this.measurementtype = measurementtype;
		this.valueFrom = valueFrom;
		this.valueTo = valueTo;
		this.mustGenerateAlert = mustGenerateAlert;
		this.commaEnumValues = commaEnumValues;
		this.created = created;
		this.updated = updated;
		this.active = active;
		this.updateUser = updateUser;
		this.customthresholds = customthresholds;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "idStandardThreshold", unique = true, nullable = false)
	public Integer getIdStandardThreshold() {
		return this.idStandardThreshold;
	}

	public void setIdStandardThreshold(Integer idStandardThreshold) {
		this.idStandardThreshold = idStandardThreshold;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idMeasurementType", nullable = false)
	public Measurementtype getMeasurementtype() {
		return this.measurementtype;
	}

	public void setMeasurementtype(Measurementtype measurementtype) {
		this.measurementtype = measurementtype;
	}

	@Column(name = "valueFrom", precision = 12, scale = 0)
	public Float getValueFrom() {
		return this.valueFrom;
	}

	public void setValueFrom(Float valueFrom) {
		this.valueFrom = valueFrom;
	}

	@Column(name = "valueTo", precision = 12, scale = 0)
	public Float getValueTo() {
		return this.valueTo;
	}

	public void setValueTo(Float valueTo) {
		this.valueTo = valueTo;
	}

	@Column(name = "mustGenerateAlert")
	public Boolean getMustGenerateAlert() {
		return this.mustGenerateAlert;
	}

	public void setMustGenerateAlert(Boolean mustGenerateAlert) {
		this.mustGenerateAlert = mustGenerateAlert;
	}

	@Column(name = "commaEnumValues")
	public String getCommaEnumValues() {
		return this.commaEnumValues;
	}

	public void setCommaEnumValues(String commaEnumValues) {
		this.commaEnumValues = commaEnumValues;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", nullable = false, length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated", nullable = false, length = 19)
	public Date getUpdated() {
		return this.updated;
	}

	public void setUpdated(Date updated) {
		this.updated = updated;
	}

	@Column(name = "active", nullable = false)
	public boolean isActive() {
		return this.active;
	}

	public void setActive(boolean active) {
		this.active = active;
	}

	@Column(name = "updateUser", nullable = false, length = 100)
	public String getUpdateUser() {
		return this.updateUser;
	}

	public void setUpdateUser(String updateUser) {
		this.updateUser = updateUser;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "standardthreshold")
	public Set<Customthreshold> getCustomthresholds() {
		return this.customthresholds;
	}

	public void setCustomthresholds(Set<Customthreshold> customthresholds) {
		this.customthresholds = customthresholds;
	}

}
