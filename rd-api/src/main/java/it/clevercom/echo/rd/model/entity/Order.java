package it.clevercom.echo.rd.model.entity;
// Generated 13-feb-2017 9.08.37 by Hibernate Tools 5.1.0.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Order generated by hbm2java
 */
@Entity
@Table(name = "order", catalog = "rmdw", uniqueConstraints = @UniqueConstraint(columnNames = "idRadiologicalTask"))
public class Order implements java.io.Serializable {

	private Integer idOrder;
	private Organizationunit organizationunitByTargetOrganizationUnit;
	private Organizationunit organizationunitByOriginOrganizationUnit;
	private Priority priority;
	private Radiologictask radiologictask;
	private Status status;
	private String acquisitionChannel;
	private Date creationDate;
	private Date scheduledDate;
	private Date acceptanceDate;
	private Integer duration;
	private String requestingPhysician;
	private String orderReason;
	private String rejectReason;
	private String clinicalHistory;
	private String notes;
	private Date created;
	private Date updated;
	private String userUpdate;
	private boolean active;
	private Set<Ordertracking> ordertrackings = new HashSet<Ordertracking>(0);
	private Set<Service> services = new HashSet<Service>(0);

	public Order() {
	}

	public Order(Organizationunit organizationunitByTargetOrganizationUnit,
			Organizationunit organizationunitByOriginOrganizationUnit, Priority priority, Radiologictask radiologictask,
			Status status, String acquisitionChannel, Date creationDate, Date created, Date updated, String userUpdate,
			boolean active) {
		this.organizationunitByTargetOrganizationUnit = organizationunitByTargetOrganizationUnit;
		this.organizationunitByOriginOrganizationUnit = organizationunitByOriginOrganizationUnit;
		this.priority = priority;
		this.radiologictask = radiologictask;
		this.status = status;
		this.acquisitionChannel = acquisitionChannel;
		this.creationDate = creationDate;
		this.created = created;
		this.updated = updated;
		this.userUpdate = userUpdate;
		this.active = active;
	}

	public Order(Organizationunit organizationunitByTargetOrganizationUnit,
			Organizationunit organizationunitByOriginOrganizationUnit, Priority priority, Radiologictask radiologictask,
			Status status, String acquisitionChannel, Date creationDate, Date scheduledDate, Date acceptanceDate,
			Integer duration, String requestingPhysician, String orderReason, String rejectReason,
			String clinicalHistory, String notes, Date created, Date updated, String userUpdate, boolean active,
			Set<Ordertracking> ordertrackings, Set<Service> services) {
		this.organizationunitByTargetOrganizationUnit = organizationunitByTargetOrganizationUnit;
		this.organizationunitByOriginOrganizationUnit = organizationunitByOriginOrganizationUnit;
		this.priority = priority;
		this.radiologictask = radiologictask;
		this.status = status;
		this.acquisitionChannel = acquisitionChannel;
		this.creationDate = creationDate;
		this.scheduledDate = scheduledDate;
		this.acceptanceDate = acceptanceDate;
		this.duration = duration;
		this.requestingPhysician = requestingPhysician;
		this.orderReason = orderReason;
		this.rejectReason = rejectReason;
		this.clinicalHistory = clinicalHistory;
		this.notes = notes;
		this.created = created;
		this.updated = updated;
		this.userUpdate = userUpdate;
		this.active = active;
		this.ordertrackings = ordertrackings;
		this.services = services;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "idOrder", unique = true, nullable = false)
	public Integer getIdOrder() {
		return this.idOrder;
	}

	public void setIdOrder(Integer idOrder) {
		this.idOrder = idOrder;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "targetOrganizationUnit", nullable = false)
	public Organizationunit getOrganizationunitByTargetOrganizationUnit() {
		return this.organizationunitByTargetOrganizationUnit;
	}

	public void setOrganizationunitByTargetOrganizationUnit(Organizationunit organizationunitByTargetOrganizationUnit) {
		this.organizationunitByTargetOrganizationUnit = organizationunitByTargetOrganizationUnit;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "originOrganizationUnit", nullable = false)
	public Organizationunit getOrganizationunitByOriginOrganizationUnit() {
		return this.organizationunitByOriginOrganizationUnit;
	}

	public void setOrganizationunitByOriginOrganizationUnit(Organizationunit organizationunitByOriginOrganizationUnit) {
		this.organizationunitByOriginOrganizationUnit = organizationunitByOriginOrganizationUnit;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "priorityCode", nullable = false)
	public Priority getPriority() {
		return this.priority;
	}

	public void setPriority(Priority priority) {
		this.priority = priority;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idRadiologicalTask", unique = true, nullable = false)
	public Radiologictask getRadiologictask() {
		return this.radiologictask;
	}

	public void setRadiologictask(Radiologictask radiologictask) {
		this.radiologictask = radiologictask;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "statusCode", nullable = false)
	public Status getStatus() {
		return this.status;
	}

	public void setStatus(Status status) {
		this.status = status;
	}

	@Column(name = "acquisitionChannel", nullable = false, length = 8)
	public String getAcquisitionChannel() {
		return this.acquisitionChannel;
	}

	public void setAcquisitionChannel(String acquisitionChannel) {
		this.acquisitionChannel = acquisitionChannel;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "creationDate", nullable = false, length = 19)
	public Date getCreationDate() {
		return this.creationDate;
	}

	public void setCreationDate(Date creationDate) {
		this.creationDate = creationDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "scheduledDate", length = 19)
	public Date getScheduledDate() {
		return this.scheduledDate;
	}

	public void setScheduledDate(Date scheduledDate) {
		this.scheduledDate = scheduledDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "acceptanceDate", length = 19)
	public Date getAcceptanceDate() {
		return this.acceptanceDate;
	}

	public void setAcceptanceDate(Date acceptanceDate) {
		this.acceptanceDate = acceptanceDate;
	}

	@Column(name = "duration")
	public Integer getDuration() {
		return this.duration;
	}

	public void setDuration(Integer duration) {
		this.duration = duration;
	}

	@Column(name = "requestingPhysician")
	public String getRequestingPhysician() {
		return this.requestingPhysician;
	}

	public void setRequestingPhysician(String requestingPhysician) {
		this.requestingPhysician = requestingPhysician;
	}

	@Column(name = "orderReason")
	public String getOrderReason() {
		return this.orderReason;
	}

	public void setOrderReason(String orderReason) {
		this.orderReason = orderReason;
	}

	@Column(name = "rejectReason")
	public String getRejectReason() {
		return this.rejectReason;
	}

	public void setRejectReason(String rejectReason) {
		this.rejectReason = rejectReason;
	}

	@Column(name = "clinicalHistory")
	public String getClinicalHistory() {
		return this.clinicalHistory;
	}

	public void setClinicalHistory(String clinicalHistory) {
		this.clinicalHistory = clinicalHistory;
	}

	@Column(name = "notes")
	public String getNotes() {
		return this.notes;
	}

	public void setNotes(String notes) {
		this.notes = notes;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", nullable = false, length = 19)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated", nullable = false, length = 19)
	public Date getUpdated() {
		return this.updated;
	}

	public void setUpdated(Date updated) {
		this.updated = updated;
	}

	@Column(name = "userUpdate", nullable = false, length = 100)
	public String getUserUpdate() {
		return this.userUpdate;
	}

	public void setUserUpdate(String userUpdate) {
		this.userUpdate = userUpdate;
	}

	@Column(name = "active", nullable = false)
	public boolean isActive() {
		return this.active;
	}

	public void setActive(boolean active) {
		this.active = active;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "order")
	public Set<Ordertracking> getOrdertrackings() {
		return this.ordertrackings;
	}

	public void setOrdertrackings(Set<Ordertracking> ordertrackings) {
		this.ordertrackings = ordertrackings;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "order_service", catalog = "rmdw", joinColumns = {
			@JoinColumn(name = "idOrder", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "idService", nullable = false, updatable = false) })
	public Set<Service> getServices() {
		return this.services;
	}

	public void setServices(Set<Service> services) {
		this.services = services;
	}

}
